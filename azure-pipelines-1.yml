# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

resources:
  webhooks:
    - webhook: StartPipeline          ### Webhook alias
      connection: deploy_service_webhook    ### Incoming webhook service connection
      # filters:
      #   - path: repositoryName      ### JSON path in the payload
      #     value: maven-releases     ### Expected value in the path provided
      #   - path: action
      #     value: CREATED


trigger:
- main

# resources:
# - repo: self

pool:
  name: vmsspool # InternalPool
  # demands:
  #  - agent.name -equals ag01

  # demands:
parameters:
  - name: environment
    displayName: Which Team to deploy?
    type: string
    default: 'developer'
    values:
    - developer
    - preproduction
    - production
 
variables:
  - name: dockerRegistryServiceConnection
      value:'ContainerRegistry'
  - name: imageRepository
      value:'app'
  - name: containerRegistry
      value:'registry01xtr.azurecr.io'
  - name: dockerfilePath
      value:'**/Dockerfile'
  - name: tag
      value:'$(Build.BuildId)'
  - name: imagePullSecret
      value:'registryxzds1938d937-auth'
  - name: teamName
    ${{ if eq( parameters['environment'], 'developer') }}:
      value:"alpha"
    ${{ if eq( parameters['environment'], 'preproduction' ) }}:
      value:"beta"
    ${{ if notIn( parameters['environment'], 'developer', 'preproduction') }}:
      value:"charlie"



  # Container registry service connection established during pipeline creation


  # # Agent VM image name
  # vmImageName: 'ubuntu-latest'

steps:

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      ### JSON payload data is available in the form of ${{ parameters.<WebhookAlias>.<JSONPath>}}
      script: |
        Write-Host ${{ parameters.MyWebhookTrigger.repositoryName}}
        Write-Host ${{ parameters.MyWebhookTrigger.component.group}}
  - task: Docker@2
    displayName: Build and push an image to container registry
    inputs:
      command: buildAndPush
      repository: $(imageRepository)
      dockerfile: $(dockerfilePath)
      containerRegistry: $(dockerRegistryServiceConnection)
      tags: |
        $(tag)

  - upload: manifests
    artifact: manifests
  
  - task: KubernetesManifest@1
    inputs:
      action: 'deploy'
      connectionType: 'azureResourceManager'
      azureSubscriptionConnection: 'SC-T01'
      azureResourceGroup: 'RG-DevOps'
      kubernetesCluster: 'aks-app-01'
      namespace: 'default'
      manifests: |
            **/manifests/deployment.yml               
            **/manifests/service.yml
      containers: $(containerRegistry)/$(imageRepository):$(tag)
  
  # - task: KubernetesManifest@
  #         displayName: Create imagePullSecret
  #         inputs:
  #           action: createSecret
  #           secretName: $(imagePullSecret)
  #           dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

  #       - task: KubernetesManifest@0
  #         displayName: Deploy to Kubernetes cluster
  #         inputs:
  #           action: deploy
  #           manifests: |
  #             $(Pipeline.Workspace)/manifests/deployment.yml
  #             $(Pipeline.Workspace)/manifests/service.yml
  #           imagePullSecrets: |
  #             $(imagePullSecret)
  #           containers: |
  #             $(containerRegistry)/$(imageRepository):$(tag)

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   # jobs:
#   # - deployment: Deploy
#   #   displayName: Deploy
#   #   pool:
#   #     vmImage: $(vmImageName)
#   environment: 'chetanvcodeapp-1481.default'
#   strategy:
#     runOnce:
#       deploy:
#         steps:
#         - task: KubernetesManifest@0
#           displayName: Create imagePullSecret
#           inputs:
#             action: createSecret
#             secretName: $(imagePullSecret)
#             dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#         - task: KubernetesManifest@0
#           displayName: Deploy to Kubernetes cluster
#           inputs:
#             action: deploy
#             manifests: |
#               $(Pipeline.Workspace)/manifests/deployment.yml
#               $(Pipeline.Workspace)/manifests/service.yml
#             imagePullSecrets: |
#               $(imagePullSecret)
#             containers: |
#               $(containerRegistry)/$(imageRepository):$(tag)

